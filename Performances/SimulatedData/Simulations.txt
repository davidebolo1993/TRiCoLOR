###Test TRiCoLOR performances

We provide in this folder the python script (Simulator.py) we used to test TRiCoLOR performances on simulated data. Simulator.py can be run in a python 3.6 environment with VISOR, TRiCoLOR and all their dependencies installed. Bash scripts contractknown.sh and expandknown.sh and BED KnownRepetitions.bed must be in the same directory.

The method is described, in short, below.

We randomly chose a region containing tandem repetitions (microsatellites) from KnownRepetitions.bed (microsatellites for GRCh38 genome), included in this directory. 
For each region randomly chosen, we generated one haplotype containing either a contraction or an expansion of the microsatellite and another containing no contraction or expansion (we ended up with a diploid sample with a heterozigous microsatellite expansion or contraction).
Both contraction and expansion have a default size of 7.
The modified haplotype and the untouched one were generated calling VISOR HACk (https://github.com/davidebolo1993/VISOR).
Long reads simulation has been performed calling VISOR LASeR: mean coverage given to VISOR LASeR for each haplotype is set to be double the value of the -c/--coveragemin parameter of the Simulator.py script, maen accuracy is the default mean accuracy for ONT data (0.9, - that is, approximately 10% error rate). Substitution:insertion:deletion ratio is the default one for ONT data (30:30:40). Mean reads length is the default mean reads length for ONT data (8000 bps).
BAM with coverage falling outside the range specified by -c/--coveragemin and -C/--coveragemax are discarded and simulated again.
We run TRiCoLOR REFER on the diploid sample with the default parameters but using -m/--motif equal to the length of the known repeated motif and the --precisemotif parameter.
We calculated TRiCoLOR Sensitivity and Specificity, Precision and Recall and the capability to discriminate the correct repeated motif of the microsatellite. 

TP are haplotypes with expansion/contraction of 7 repetitions for which TRiCoLOR identifies a correct expansion/contraction of 7 +-1 repetitions or 7 +-2 repetitions.
TN are haplotypes with no expansion/contraction for which TRiCoLOR identifies the original number of repetitions +-1 or +-2.
FN are haplotypes with expansion/contraction of 7 repetitions for which TRiCoLOR does not identify a correct expansion/contraction of 7 +-1 repetitions or 7 +-2 repetitions.
FP are haplotypes with no expansion/contraction for which TRiCoLOR does not identifies the original number of repetitions +-1 or +-2.

The results we got were:

- For Sequence accuracy = 0.9 and Coverage >= 5 and <= 10:

-- Exact Expansion +- 1:

--- Sensitivity and Specificity: 1.0,0.91
--- Precision and Recall: 0.9174, 1.0
--- Core (correct motif, shifted motif, wrong motif ratios): 0.9,0.1,0.0

-- Exact Expansion +- 2:

--- Sensitivity and Specificity: 1.0,0.98
--- Precision and Recall: 0.98, 1.0
--- Core (correct motif, shifted motif, wrong motif ratios): 0.9,0.1,0.0 #same as before, obviously

-- Exact Contraction +-1:

--- Sensitivity and Specificity: 0.97,0.89
--- Precision and Recall: 0.8981, 0.97
--- Core (correct motif, shifted motif, wrong motif ratios): 0.935,0.065,0.0

-- Exact Contraction +-2:

--- Sensitivity and Specificity: 0.99,0.95
--- Precision and Recall: 0.9519, 0.99
--- Core (correct motif, shifted motif, wrong motif ratios): 0.935,0.065,0.0 #same as before, obviously

- For Sequence accuracy = 0.9 and Coverage >= 10 and <= 20:

-- Exact Expansion +- 1:

--- Sensitivity and Specificity:0.99,0.95
--- Precision and Recall:0.9519,0.99
--- Core (correct motif, shifted motif, wrong motif ratios): 0.92,0.08,0.0

-- Exact Expansion +- 2:

--- Sensitivity and Specificity:1.0,1.0
--- Precision and Recall:1.0,1.0
--- Core (correct motif, shifted motif, wrong motif ratios):

-- Exact Contraction +-1:

--- Sensitivity and Specificity:0.98,0.95
--- Precision and Recall:0.9514,0.98
--- Core (correct motif, shifted motif, wrong motif ratios):0.955,0.045,0.0

-- Exact Contraction +-2:

--- Sensitivity and Specificity:1.0,1.0
--- Precision and Recall:1.0,1.0
--- Core (correct motif, shifted motif, wrong motif ratios):0.955,0.045,0.0 #same as before, obviously



###Train entropy treshold for TRiCoLOR SENSoR

Simulator.py is also suitable to generate simulated BAM with wanted error profiles that can be used to train a propietary entropy treshold for TRiCoLOR SENSoR. The default entropy treshold has been trained on BAM files with accuracy 0.9 (10% error rate),  substitution:insertion:deletion ratio of 30:30:40, and mean length 8000 bps, using a scansize of 20 bps and has been set as mean-3sd of the resulting entropy distributions.

However, one can generate BAM with propietary error profiles and train different scansizes. Once simulated BAM have been generated (one can skip TRiCoLOR performances evaluation using the --skipTRiCoLOR parameter of the script), one can use the Trainer.py script to train different scansizes on simulated data. This will give, as results, some plots illustrating entropy distributions for BAM with microsatellites contractions and expansions and for normal BAM and Summary files with teir mean-3sd values.
